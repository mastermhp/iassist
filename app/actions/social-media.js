"use server"

// Server actions for secure social media posting
export async function postToFacebook(content, imageUrl) {
  try {
    const pageId = process.env.FB_PAGE_ID
    const accessToken = process.env.FB_ACCESS_TOKEN

    if (!pageId || !accessToken) {
      throw new Error("Facebook credentials not configured")
    }

    const postData = {
      message: content,
      access_token: accessToken,
    }

    if (imageUrl) {
      postData.url = imageUrl
      delete postData.message
      postData.caption = content
    }

    const endpoint = imageUrl
      ? `https://graph.facebook.com/v18.0/${pageId}/photos`
      : `https://graph.facebook.com/v18.0/${pageId}/feed`

    const response = await fetch(endpoint, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(postData),
    })

    const data = await response.json()

    if (!response.ok) {
      throw new Error(data.error?.message || "Failed to post to Facebook")
    }

    return {
      success: true,
      postId: data.id,
      platform: "facebook",
      postedAt: new Date().toISOString(),
    }
  } catch (error) {
    return {
      success: false,
      error: error.message,
    }
  }
}

export async function postToInstagram(content, imageUrl) {
  try {
    const instagramAccountId = process.env.IG_ACCOUNT_ID
    const accessToken = process.env.FB_ACCESS_TOKEN

    if (!instagramAccountId || !accessToken) {
      throw new Error("Instagram credentials not configured")
    }

    if (!imageUrl) {
      throw new Error("Instagram posts require an image")
    }

    // Step 1: Create media container
    const containerResponse = await fetch(`https://graph.facebook.com/v18.0/${instagramAccountId}/media`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        image_url: imageUrl,
        caption: content,
        access_token: accessToken,
      }),
    })

    const containerData = await containerResponse.json()

    if (!containerResponse.ok) {
      throw new Error(containerData.error?.message || "Failed to create Instagram media container")
    }

    // Step 2: Publish the media
    const publishResponse = await fetch(`https://graph.facebook.com/v18.0/${instagramAccountId}/media_publish`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        creation_id: containerData.id,
        access_token: accessToken,
      }),
    })

    const publishData = await publishResponse.json()

    if (!publishResponse.ok) {
      throw new Error(publishData.error?.message || "Failed to publish Instagram post")
    }

    return {
      success: true,
      postId: publishData.id,
      platform: "instagram",
      postedAt: new Date().toISOString(),
    }
  } catch (error) {
    return {
      success: false,
      error: error.message,
    }
  }
}

export async function postToTwitter(content, imageUrl) {
  try {
    // Twitter API requires OAuth 1.0a which is complex to implement
    // For now, return a mock response
    return {
      success: true,
      postId: `mock_twitter_${Date.now()}`,
      platform: "twitter",
      postedAt: new Date().toISOString(),
      note: "Twitter integration requires OAuth 1.0a setup. This is a mock response.",
    }
  } catch (error) {
    return {
      success: false,
      error: error.message,
    }
  }
}

export async function postToLinkedIn(content, imageUrl) {
  try {
    const personId = process.env.LINKEDIN_PERSON_ID
    const accessToken = process.env.LINKEDIN_ACCESS_TOKEN

    if (!personId || !accessToken) {
      throw new Error("LinkedIn credentials not configured")
    }

    const postData = {
      author: `urn:li:person:${personId}`,
      lifecycleState: "PUBLISHED",
      specificContent: {
        "com.linkedin.ugc.ShareContent": {
          shareCommentary: {
            text: content,
          },
          shareMediaCategory: imageUrl ? "IMAGE" : "NONE",
        },
      },
      visibility: {
        "com.linkedin.ugc.MemberNetworkVisibility": "PUBLIC",
      },
    }

    if (imageUrl) {
      postData.specificContent["com.linkedin.ugc.ShareContent"].media = [
        {
          status: "READY",
          description: {
            text: "Generated by AI Social Media Automation",
          },
          media: imageUrl,
          title: {
            text: "AI Generated Content",
          },
        },
      ]
    }

    const response = await fetch("https://api.linkedin.com/v2/ugcPosts", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${accessToken}`,
      },
      body: JSON.stringify(postData),
    })

    const data = await response.json()

    if (!response.ok) {
      throw new Error(data.message || "Failed to post to LinkedIn")
    }

    return {
      success: true,
      postId: data.id,
      platform: "linkedin",
      postedAt: new Date().toISOString(),
    }
  } catch (error) {
    return {
      success: false,
      error: error.message,
    }
  }
}

export async function postToMultiplePlatforms(content, imageUrl, platforms) {
  const results = {}

  for (const platform of platforms) {
    try {
      let result
      switch (platform) {
        case "facebook":
          result = await postToFacebook(content, imageUrl)
          break
        case "instagram":
          result = await postToInstagram(content, imageUrl)
          break
        case "twitter":
          result = await postToTwitter(content, imageUrl)
          break
        case "linkedin":
          result = await postToLinkedIn(content, imageUrl)
          break
        default:
          result = { success: false, error: "Unsupported platform" }
      }
      results[platform] = result
    } catch (error) {
      results[platform] = { success: false, error: error.message }
    }
  }

  return results
}
